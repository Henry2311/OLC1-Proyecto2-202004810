/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,19],$V1=[1,29],$V2=[1,20],$V3=[1,27],$V4=[1,28],$V5=[1,26],$V6=[1,24],$V7=[1,25],$V8=[1,23],$V9=[1,21],$Va=[1,22],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[5,23,24,45,46,52,53,55,57,58,61,64,65,66,67,68,69,96,97,98,99,100],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[24,27,51,70],$Vl=[1,83],$Vm=[1,70],$Vn=[1,95],$Vo=[1,94],$Vp=[1,93],$Vq=[1,92],$Vr=[1,91],$Vs=[1,89],$Vt=[1,90],$Vu=[1,69],$Vv=[1,84],$Vw=[1,85],$Vx=[1,86],$Vy=[1,87],$Vz=[1,88],$VA=[1,104],$VB=[1,105],$VC=[52,53,65,67],$VD=[1,123],$VE=[1,124],$VF=[1,137],$VG=[1,125],$VH=[1,126],$VI=[1,127],$VJ=[1,128],$VK=[1,129],$VL=[1,130],$VM=[1,131],$VN=[1,132],$VO=[1,133],$VP=[1,134],$VQ=[1,135],$VR=[1,136],$VS=[77,78,81,84,85,86,87,88,89,90,91,92,93,94,95],$VT=[2,116],$VU=[2,85],$VV=[2,119],$VW=[2,86],$VX=[8,27,28,49,52,71,77,78,81,84,85,86,87,88,89,90,91,92,93,94,95],$VY=[2,131],$VZ=[2,48],$V_=[1,156],$V$=[2,68],$V01=[1,162],$V11=[1,160],$V21=[1,161],$V31=[8,27,28,49,52,71,77,78,84,85,86,87,88,89,90,91,92,93,94,95],$V41=[27,28],$V51=[8,27,28,49,52,71,77,78,88,89,90,91,92,93,94,95],$V61=[8,27,28,49,52,71,88,89,90,91,92,93,94,95],$V71=[1,249],$V81=[1,257],$V91=[8,27,28,49,52,71],$Va1=[1,278],$Vb1=[28,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"puntocoma":8,"ASIGNACION":9,"INDECRE":10,"MODIFICACIONV":11,"IFSENTENCIA":12,"SWITCHSENTENCIA":13,"CICLOWHILE":14,"CICLOFOR":15,"CICLODOWHILE":16,"FUNCTION":17,"METODO":18,"LLAMADA":19,"FUNPRINT":20,"FUNPRINTLN":21,"EJECUTAR":22,"run":23,"identificador":24,"parena":25,"LISTAEXP":26,"parenc":27,"coma":28,"EXPRESION":29,"NATIVAS":30,"FUNLOWER":31,"FUNUPPER":32,"FUNROUND":33,"FUNLENGTH":34,"FUNTYPE":35,"FUNTOSTRING":36,"FUNTOCHAR":37,"tochararray":38,"tostring":39,"typeof":40,"length":41,"round":42,"tolower":43,"toupper":44,"print":45,"println":46,"TIPO":47,"PARAMETROS":48,"dospunto":49,"void":50,"llavea":51,"llavec":52,"return":53,"LLAMADAP":54,"do":55,"TRANSFERENCIA":56,"while":57,"for":58,"INICIOFOR":59,"ACTUALIZACION":60,"switch":61,"LISTACASES":62,"CASEDEF":63,"case":64,"break":65,"default":66,"continue":67,"if":68,"else":69,"corchetea":70,"corchetec":71,"igual":72,"ACCESOV":73,"LISTAVALORESV":74,"VALOR":75,"LISTAVALORESM":76,"mas":77,"menos":78,"CASTEO":79,"TERNARY":80,"ternario":81,"LISTAID":82,"new":83,"por":84,"divi":85,"mod":86,"pow":87,"igualq":88,"mayorq":89,"menorq":90,"mayorigq":91,"menorigq":92,"noigual":93,"and":94,"or":95,"int":96,"double":97,"string":98,"char":99,"boolean":100,"valorint":101,"valordouble":102,"valorstring":103,"valorchar":104,"valorboolean":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"puntocoma",23:"run",24:"identificador",25:"parena",27:"parenc",28:"coma",38:"tochararray",39:"tostring",40:"typeof",41:"length",42:"round",43:"tolower",44:"toupper",45:"print",46:"println",49:"dospunto",50:"void",51:"llavea",52:"llavec",53:"return",55:"do",57:"while",58:"for",61:"switch",64:"case",65:"break",66:"default",67:"continue",68:"if",69:"else",70:"corchetea",71:"corchetec",72:"igual",77:"mas",78:"menos",81:"ternario",83:"new",84:"por",85:"divi",86:"mod",87:"pow",88:"igualq",89:"mayorq",90:"menorq",91:"mayorigq",92:"menorigq",93:"noigual",94:"and",95:"or",96:"int",97:"double",98:"string",99:"char",100:"boolean",101:"valorint",102:"valordouble",103:"valorstring",104:"valorchar",105:"valorboolean"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,0],[22,5],[22,4],[26,3],[26,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[37,4],[36,4],[35,4],[34,4],[33,4],[31,4],[32,4],[20,4],[21,4],[18,11],[18,8],[18,7],[18,6],[17,13],[48,4],[48,3],[19,5],[19,3],[54,3],[54,2],[16,9],[15,12],[60,1],[60,1],[59,1],[59,1],[14,8],[13,8],[62,7],[62,6],[62,5],[62,4],[63,5],[56,2],[56,2],[56,3],[56,2],[56,0],[12,8],[12,5],[12,9],[11,6],[11,9],[73,4],[73,7],[74,3],[74,1],[76,5],[76,3],[10,3],[10,3],[79,4],[80,5],[9,3],[9,3],[9,3],[7,2],[7,4],[7,2],[7,4],[7,10],[7,15],[7,8],[7,10],[7,6],[82,3],[82,1],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[47,1],[47,1],[47,1],[47,1],[47,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("Analisis sintactico completo"); return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 77:
this.$ = [$$[$0]]
break;
case 4: case 5: case 16: case 17: case 113:
this.$ = $$[$0-1]
break;
case 38:
this.$ = new Print($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 39:
this.$ = new Println($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 74:
this.$= new IDE($$[$0-3],1,$$[$0-1],null, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 75:
this.$= new IDE($$[$0-6],1,$$[$0-4],$$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 76:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 78:
$$[$0-4].push($$[$0-1]); this.$ = $$[$0-4];
break;
case 79:
this.$ = [$$[$0-1]]
break;
case 80:
this.$ = new Increment($$[$0-2],0,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 81:
this.$ = new Increment($$[$0-2],1,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 83:
this.$ = new Ternary($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 84:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 87: case 89:
this.$= new Declaracion($$[$0],$$[$0-1],null, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 88: case 90:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 91:
this.$= new DeclaracionV($$[$0-8],$$[$0-9],$$[$0-1],null,null,0, _$[$0-9].first_line, _$[$0-9].first_column)
break;
case 92:
this.$= new DeclaracionV($$[$0-13],$$[$0-14],$$[$0-4],$$[$0-1],null,0, _$[$0-14].first_line, _$[$0-14].first_column)
break;
case 93:
this.$= new DeclaracionV($$[$0-6],$$[$0-7],null,null,$$[$0-1],0,_$[$0-7].first_line, _$[$0-7].first_column)
break;
case 94:
this.$= new DeclaracionV($$[$0-8],$$[$0-9],null,null,$$[$0-1],1,_$[$0-9].first_line, _$[$0-9].first_column)
break;
case 96:
$$[$0-2]+=","+$$[$0]; this.$ = $$[$0-2];
break;
case 97: case 114: case 115: case 116: case 117: case 120:
this.$ = $$[$0]
break;
case 98:
this.$ = new Arithmetic(null,$$[$0],ArithmeticOption.NEGACION,_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 99:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 100:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 101:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POR,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 102:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 103:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MOD,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 104:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POW,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 105:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.IGUALQ,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 106:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.MAYORQ,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 107:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.MENORQ,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 108:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.MAYORIGQ,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 109:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.MENORIGQ,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 110:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.NOIGUAL,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 121:
this.$=Type.INT
break;
case 122:
this.$=Type.DOUBLE
break;
case 123:
this.$=Type.STRING
break;
case 124:
this.$=Type.CHAR
break;
case 125:
this.$=Type.BOOLEAN
break;
case 126:
this.$= new Value($$[$0],Type.INT,  _$[$0].first_line, _$[$0].first_column)
break;
case 127:
this.$= new Value($$[$0],Type.DOUBLE,  _$[$0].first_line, _$[$0].first_column)
break;
case 128:
this.$= new Value($$[$0],Type.STRING,  _$[$0].first_line, _$[$0].first_column)
break;
case 129:
this.$= new Value($$[$0],Type.CHAR,  _$[$0].first_line, _$[$0].first_column)
break;
case 130:
this.$= new Value($$[$0],Type.BOOLEAN,  _$[$0].first_line, _$[$0].first_column)
break;
case 131:
this.$= new IDE($$[$0],0,null,null, _$[$0].first_line, _$[$0].first_column)
break;
}
},
table: [{3:1,4:2,5:$V0,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{1:[3]},{5:[1,35],6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},o($Vg,[2,3]),{8:[1,37]},{8:[1,38]},{8:[1,39]},{8:[1,40]},o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),{8:[1,41]},{8:[1,42]},{8:[1,43]},{8:[1,44]},{24:[1,45],82:46},{25:[1,51],70:[1,50],72:$Vh,77:$Vi,78:$Vj},{25:[1,52]},{51:[1,53],68:[1,54]},{25:[1,55]},{25:[1,56]},{25:[1,57]},{51:[1,58]},{25:[1,59]},{25:[1,60]},{24:[1,61]},o($Vk,[2,121]),o($Vk,[2,122]),o($Vk,[2,123]),o($Vk,[2,124]),o($Vk,[2,125]),{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),{8:[2,87],28:[2,97],70:[1,63],72:[1,62]},{8:[2,89],28:[1,65],72:[1,64]},{10:71,19:74,24:$Vl,25:$Vm,29:66,30:68,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:67,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{77:[1,96]},{78:[1,97]},{10:71,19:74,24:$Vl,25:$Vm,29:98,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{24:$VA,27:[1,102],28:$VB,47:101,48:103,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{10:71,19:74,24:$Vl,25:$Vm,29:106,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($VC,$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,47:19,4:107,23:$V1,24:$V2,45:$V3,46:$V4,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf}),{25:[1,108]},{10:71,19:74,24:$Vl,25:$Vm,29:109,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:110,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{7:112,9:113,24:[1,114],47:19,59:111,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},o($VC,$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,47:19,4:115,23:$V1,24:$V2,45:$V3,46:$V4,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf}),{10:71,19:74,24:$Vl,25:$Vm,29:116,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:117,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{25:[1,118]},{10:71,19:74,24:$Vl,25:$Vm,29:119,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{71:[1,120]},{10:71,19:74,24:$Vl,25:$Vm,29:121,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{24:[1,122]},o([8,27],[2,84],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR}),o($VS,$VT,{8:$VU,27:$VU}),o($VS,$VV,{8:$VW,27:$VW}),{10:71,19:74,24:$Vl,25:$Vm,29:138,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:139,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,47:140,73:72,75:75,78:$Vu,79:99,80:73,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($VX,[2,114]),o($VX,[2,115]),o($VX,[2,117]),o($VX,[2,118]),o($VX,[2,120]),o($VX,[2,24]),o($VX,[2,25]),o($VX,[2,26]),o($VX,[2,27]),o($VX,[2,28]),o($VX,[2,29]),o($VX,[2,30]),o([8,27,28,49,52,71,81,84,85,86,87,88,89,90,91,92,93,94,95],$VY,{25:[1,142],70:[1,141],77:$Vi,78:$Vj}),o($VX,[2,126]),o($VX,[2,127]),o($VX,[2,128]),o($VX,[2,129]),o($VX,[2,130]),{25:[1,143]},{25:[1,144]},{25:[1,145]},{25:[1,146]},{25:[1,147]},{25:[1,148]},{25:[1,149]},o($VX,[2,80]),o($VX,[2,81]),{71:[1,150],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},o($VX,$VT),o($VX,$VV),{24:[1,151]},{8:$VZ,49:[1,152],51:[1,153]},{27:[1,154]},{28:$V_,54:155},{47:157,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{27:[1,158],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:$V$,53:$V01,55:$V5,56:159,57:$V6,58:$V7,61:$V8,65:$V11,67:$V21,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{10:71,19:74,24:$Vl,25:$Vm,29:163,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{27:[1,164],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{27:[1,165],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{8:[1,166]},{8:[2,55]},{8:[2,56]},{72:$Vh},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:$V$,53:$V01,55:$V5,56:167,57:$V6,58:$V7,61:$V8,65:$V11,67:$V21,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{27:[1,168],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{27:[1,169],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{10:71,19:74,24:$Vl,25:$Vm,26:170,27:[1,171],29:172,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{8:[2,88],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{70:[1,174],72:[1,173]},{8:[2,90],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},o([8,28,72],[2,96]),{10:71,19:74,24:$Vl,25:$Vm,29:175,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:176,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:177,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:178,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:179,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:180,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:181,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:182,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:183,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:184,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:185,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:186,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:187,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:188,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:189,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($V31,[2,98],{81:$VF}),{27:[1,190],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{27:[1,191]},{10:71,19:74,24:$Vl,25:$Vm,29:192,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{24:$VA,27:[1,193]},{10:71,19:74,24:$Vl,25:$Vm,29:194,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:195,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:196,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:197,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:198,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:199,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:200,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{70:[1,202],72:[1,201]},{28:$VB,48:203},{50:[1,204]},{4:205,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:$V0,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{51:[1,206]},{27:[1,207]},{24:[1,208]},{24:[1,209]},{51:[1,210]},{52:[1,211]},{8:[1,212]},{8:[1,213]},{8:[1,215],10:71,19:74,24:$Vl,25:$Vm,29:214,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{27:[1,216],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{51:[1,217]},{51:[1,218]},{10:71,19:74,24:$Vl,25:$Vm,29:219,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{52:[1,220]},{8:[2,38]},{8:[2,39]},{27:[1,221],28:[1,222]},{8:[2,21]},o($V41,[2,23],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR}),{37:225,38:$Vn,70:[1,224],83:[1,223]},{71:[1,226]},o($V51,[2,99],{81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o($V51,[2,100],{81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o($V31,[2,101],{81:$VF}),o($V31,[2,102],{81:$VF}),o($V31,[2,103],{81:$VF}),o($V31,[2,104],{81:$VF}),o($V61,[2,105],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o($V61,[2,106],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o($V61,[2,107],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o($V61,[2,108],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o($V61,[2,109],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o($V61,[2,110],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o([8,27,28,49,52,71,94,95],[2,111],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP}),o([8,27,28,49,52,71,95],[2,112],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ}),{49:[1,227],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},o($VX,[2,113]),{10:71,19:74,24:$Vl,25:$Vm,29:228,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{71:[1,229],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},o($VX,$VZ),{27:[1,230],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{27:[1,231],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{27:[1,232],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{27:[1,233],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{27:[1,234],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{27:[1,235],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{27:[1,236],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{10:71,19:74,24:$Vl,25:$Vm,29:237,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:238,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{27:[1,239]},{51:[1,240]},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:[1,241],55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{4:242,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:$V0,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},o($VX,[2,47]),{27:[2,50],28:$V_,54:243},{27:[2,46],28:$VB,48:244},o($VC,$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,47:19,4:245,23:$V1,24:$V2,45:$V3,46:$V4,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf}),o($Vg,[2,70]),{52:[2,64]},{52:[2,65]},{8:[1,246],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{52:[2,67]},{51:[1,247]},{62:248,64:$V71},o($VC,$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,47:19,4:250,23:$V1,24:$V2,45:$V3,46:$V4,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf}),{8:[1,251],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{57:[1,252]},{8:[2,20]},{10:71,19:74,24:$Vl,25:$Vm,29:253,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{47:254,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{24:$V81,74:255,75:256,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{8:[2,95]},{72:[1,258]},{10:71,19:74,24:$Vl,25:$Vm,29:259,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($V91,[2,82],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR}),o($VX,[2,74],{70:[1,260]}),o($VX,[2,36]),o($VX,[2,37]),o($VX,[2,35]),o($VX,[2,34]),o($VX,[2,33]),o($VX,[2,32]),o($VX,[2,31]),{8:[2,72],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{71:[1,261],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{49:[1,262]},{4:263,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:$V0,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},o($Vg,[2,43]),{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:[1,264],55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{27:[2,49]},{27:[2,45]},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:$V$,53:$V01,55:$V5,56:265,57:$V6,58:$V7,61:$V8,65:$V11,67:$V21,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{52:[2,66]},o($VC,$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,47:19,4:266,23:$V1,24:$V2,45:$V3,46:$V4,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf}),{63:267,66:[1,268]},{10:71,19:74,24:$Vl,25:$Vm,29:269,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:$V$,53:$V01,55:$V5,56:270,57:$V6,58:$V7,61:$V8,65:$V11,67:$V21,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{9:273,10:272,24:[1,274],60:271},{25:[1,275]},o($V41,[2,22],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR}),{70:[1,276]},{28:$Va1,71:[1,277]},o($Vb1,[2,77]),o($Vb1,$VY),{70:[1,280],83:[1,279]},o($V91,[2,83],{77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR}),{10:71,19:74,24:$Vl,25:$Vm,29:281,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{72:[1,282]},{47:283,50:[1,284],96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:[1,285],55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},o($Vg,[2,42]),{52:[1,286]},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:$V$,53:$V01,55:$V5,56:287,57:$V6,58:$V7,61:$V8,65:$V11,67:$V21,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{52:[1,288]},{49:[1,289]},{49:[1,290],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{52:[1,291]},{27:[1,292]},{27:[2,53]},{27:[2,54]},{72:$Vh,77:$Vi,78:$Vj},{10:71,19:74,24:$Vl,25:$Vm,29:293,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{10:71,19:74,24:$Vl,25:$Vm,29:294,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{8:[2,93]},{24:$V81,75:295,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{47:296,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{70:[1,298],76:297},{71:[1,299],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{10:71,19:74,24:$Vl,25:$Vm,29:300,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{51:[1,301]},{51:[1,302]},o($Vg,[2,41]),o($Vg,[2,69]),{52:[1,303]},o($Vg,[2,58]),{4:304,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,55:$V5,57:$V6,58:$V7,61:$V8,65:$V0,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},o([64,65,66],$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,47:19,4:305,23:$V1,24:$V2,45:$V3,46:$V4,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf}),o($Vg,[2,57]),{51:[1,306]},{27:[1,307],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{71:[1,308],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},o($Vb1,[2,76]),{70:[1,309]},{28:[1,311],71:[1,310]},{24:$V81,74:312,75:256,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($VX,[2,75]),{8:[2,73],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{4:313,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,53:$V0,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{4:314,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:$V0,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},o($Vg,[2,71]),{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,55:$V5,57:$V6,58:$V7,61:$V8,65:[1,315],68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,55:$V5,57:$V6,58:$V7,61:$V8,62:317,64:$V71,65:[1,316],66:[2,62],68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},o($VC,$V0,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,47:19,4:318,23:$V1,24:$V2,45:$V3,46:$V4,55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf}),o($Vg,[2,51]),{8:[2,91]},{10:71,19:74,24:$Vl,25:$Vm,29:319,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{8:[2,94]},{70:[1,320]},{28:$Va1,71:[1,321]},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,53:[1,322],55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:[1,323],55:$V5,57:$V6,58:$V7,61:$V8,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{8:[1,324]},{8:[1,325]},{66:[2,61]},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V1,24:$V2,45:$V3,46:$V4,47:19,52:$V$,53:$V01,55:$V5,56:326,57:$V6,58:$V7,61:$V8,65:$V11,67:$V21,68:$V9,69:$Va,96:$Vb,97:$Vc,98:$Vd,99:$Ve,100:$Vf},{71:[1,327],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{24:$V81,74:328,75:256,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($Vb1,[2,79]),{10:71,19:74,24:$Vl,25:$Vm,29:329,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($Vg,[2,40]),{52:[2,63]},{62:330,64:$V71,66:[2,60]},{52:[1,331]},{70:[1,332]},{28:$Va1,71:[1,333]},{52:[1,334],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{66:[2,59]},o($Vg,[2,52]),{10:71,19:74,24:$Vl,25:$Vm,29:335,30:100,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,73:72,75:75,78:$Vu,79:99,80:73,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($Vb1,[2,78]),o($Vg,[2,44]),{71:[1,336],77:$VD,78:$VE,81:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,94:$VQ,95:$VR},{8:[2,92]}],
defaultActions: {35:[2,1],112:[2,55],113:[2,56],168:[2,38],169:[2,39],171:[2,21],212:[2,64],213:[2,65],215:[2,67],221:[2,20],225:[2,95],243:[2,49],244:[2,45],246:[2,66],272:[2,53],273:[2,54],277:[2,93],308:[2,91],310:[2,94],317:[2,61],324:[2,63],330:[2,59],336:[2,92]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Declaracion} = require('../Instructions/Declaracion');
    const {DeclaracionV} = require('../Instructions/DeclaracionV');
    const {Asignacion} = require('../Instructions/Asignacion');
    const {Print} = require('../Instructions/Print');
    const {Println} = require('../Instructions/Printl');
    const {Increment} = require('../Instructions/Increment');
    const {Ternary} = require('../Instructions/Ternary');
    const {Arithmetic} = require('../Expressions/Arithmetic');
    const {ArithmeticOption} = require('../Expressions/Arithmetic');
    const {Rational} = require('../Expressions/Rational');
    const {RationalOption} = require('../Expressions/Rational');
    const {Type} = require('../Symbol/type');
    const {Value} = require('../Expressions/Value')
    const {IDE} = require('../Expressions/IDE')
    var tmp = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:
                    this.begin('caracter')
                
break;
case 3:
                    tmp = tmp +  yy_.yytext;
                
break;
case 4:
                    //this.begin('INITIAL'); 
                    this.popState();
                    yy_.yytext = tmp
                    console.log("reconoci token <caracter> con lexema: "+yy_.yytext)
                    tmp=""
                    return 104
                
break;
case 5:
                    this.begin('cadena')
                
break;
case 6:
                    tmp = tmp +  yy_.yytext;
                
break;
case 7:
                    //this.begin('INITIAL'); 
                    this.popState();
                    yy_.yytext = tmp
                    console.log("reconoci token <cadena> con lexema: "+yy_.yytext)
                    tmp=""
                    return 103
                
break;
case 8:
                    console.log("reconoci token <decimal> con lexema: "+yy_.yytext)
                    return "valordouble"
                
break;
case 9:
                    console.log("reconoci token <entero> con lexema: "+yy_.yytext)
                    return "valorint"
                
break;
case 10:
                    console.log("reconoci token <boleano> con lexema: "+yy_.yytext)
                    return "valorboolean"
                
break;
case 11:
                    console.log("reconoci token <int> con lexema: "+yy_.yytext)
                    return "int"
                
break;
case 12:
                    console.log("reconoci token <double> con lexema: "+yy_.yytext)
                    return "double"
                
break;
case 13:
                    console.log("reconoci token <string> con lexema: "+yy_.yytext)
                    return "string"
                
break;
case 14:
                    console.log("reconoci token <char> con lexema: "+yy_.yytext)
                    return "char"
                
break;
case 15:
                    console.log("reconoci token <boolean> con lexema: "+yy_.yytext)
                    return "boolean"
                
break;
case 16:
                    console.log("reconoci token <mas> con lexema: "+yy_.yytext)
                    return "mas"
                
break;
case 17:
                    console.log("reconoci token <menos> con lexema: "+yy_.yytext)
                    return "menos"
                
break;
case 18:
                    console.log("reconoci token <por> con lexema: "+yy_.yytext)
                    return "por"
                
break;
case 19:
                    console.log("reconoci token <divi> con lexema: "+yy_.yytext)
                    return "divi"
                
break;
case 20:
                    console.log("reconoci token <pow> con lexema: "+yy_.yytext)
                    return "pow"
                
break;
case 21:
                    console.log("reconoci token <mod> con lexema: "+yy_.yytext)
                    return "mod"
                
break;
case 22:
                    console.log("reconoci token <igualq> con lexema: "+yy_.yytext)
                    return "igualq"
                
break;
case 23:
                    console.log("reconoci token <noigual> con lexema: "+yy_.yytext)
                    return "noigual"
                
break;
case 24:
                    console.log("reconoci token <menorigq> con lexema: "+yy_.yytext)
                    return "menorigq"
                
break;
case 25:
                    console.log("reconoci token <mayorigq> con lexema: "+yy_.yytext)
                    return "mayorigq"
                
break;
case 26:
                    console.log("reconoci token <igual> con lexema: "+yy_.yytext)
                    return "igual"
                
break;
case 27:
                    console.log("reconoci token <negacion> con lexema: "+yy_.yytext)
                    return "negacion"
                
break;
case 28:
                    console.log("reconoci token <menorq> con lexema: "+yy_.yytext)
                    return "menorq"
                
break;
case 29:
                    console.log("reconoci token <mayorq> con lexema: "+yy_.yytext)
                    return "mayorq"
                
break;
case 30:
                    console.log("reconoci token <ternario> con lexema: "+yy_.yytext)
                    return "ternario"
                
break;
case 31:
                    console.log("reconoci token <or> con lexema: "+yy_.yytext)
                    return "or"
                
break;
case 32:
                    console.log("reconoci token <and> con lexema: "+yy_.yytext)
                    return "and"
                
break;
case 33:
                    console.log("reconoci token <coma> con lexema: "+yy_.yytext)
                    return "coma"
                
break;
case 34:
                    console.log("reconoci token <dospunto> con lexema: "+yy_.yytext)
                    return "dospunto"
                
break;
case 35:
                    console.log("reconoci token <puntocoma> con lexema: "+yy_.yytext)
                    return "puntocoma"
                
break;
case 36:
                    console.log("reconoci token <llavea> con lexema: "+yy_.yytext)
                    return "llavea"
                
break;
case 37:
                    console.log("reconoci token <llavec> con lexema: "+yy_.yytext)
                    return "llavec"
                
break;
case 38:
                    console.log("reconoci token <parena> con lexema: "+yy_.yytext)
                    return "parena"
                
break;
case 39:
                    console.log("reconoci token <parenc> con lexema: "+yy_.yytext)
                    return "parenc"
                
break;
case 40:
                    console.log("reconoci token <corchetea> con lexema: "+yy_.yytext)
                    return "corchetea"
                
break;
case 41:
                    console.log("reconoci token <corchetec> con lexema: "+yy_.yytext)
                    return "corchetec"
                
break;
case 42:
                    console.log("reconoci token <new> con lexema: "+yy_.yytext)
                    return "new"
                
break;
case 43:
                    console.log("reconoci token <if> con lexema: "+yy_.yytext)
                    return "if"
                
break;
case 44:
                    console.log("reconoci token <else> con lexema: "+yy_.yytext)
                    return "else"
                
break;
case 45:
                    console.log("reconoci token <switch> con lexema: "+yy_.yytext)
                    return "switch"
                
break;
case 46:
                    console.log("reconoci token <case> con lexema: "+yy_.yytext)
                    return "case"
                
break;
case 47:
                    console.log("reconoci token <default> con lexema: "+yy_.yytext)
                    return "default"
                
break;
case 48:
                    console.log("reconoci token <while> con lexema: "+yy_.yytext)
                    return "while"
                
break;
case 49:
                    console.log("reconoci token <for> con lexema: "+yy_.yytext)
                    return "for"
                
break;
case 50:
                    console.log("reconoci token <do> con lexema: "+yy_.yytext)
                    return "do"
                
break;
case 51:
                    console.log("reconoci token <break> con lexema: "+yy_.yytext)
                    return "break"
                
break;
case 52:
                    console.log("reconoci token <continue> con lexema: "+yy_.yytext)
                    return "continue"
                
break;
case 53:
                    console.log("reconoci token <return> con lexema: "+yy_.yytext)
                    return "return"
                
break;
case 54:
                    console.log("reconoci token <void> con lexema: "+yy_.yytext)
                    return "void"
                
break;
case 55:
                    console.log("reconoci token <print> con lexema: "+yy_.yytext)
                    return "print"
                
break;
case 56:
                    console.log("reconoci token <println> con lexema: "+yy_.yytext)
                    return "println"
                
break;
case 57:
                    console.log("reconoci token <tolower> con lexema: "+yy_.yytext)
                    return "tolower"
                
break;
case 58:
                    console.log("reconoci token <toupper> con lexema: "+yy_.yytext)
                    return "toupper"
                
break;
case 59:
                    console.log("reconoci token <round> con lexema: "+yy_.yytext)
                    return "round"
                
break;
case 60:
                    console.log("reconoci token <length> con lexema: "+yy_.yytext)
                    return "length"
                
break;
case 61:
                    console.log("reconoci token <typeof> con lexema: "+yy_.yytext)
                    return "typeof"
                
break;
case 62:
                    console.log("reconoci token <tostring> con lexema: "+yy_.yytext)
                    return "tostring"
                
break;
case 63:
                    console.log("reconoci token <tochararray> con lexema: "+yy_.yytext)
                    return "tochararray"
                
break;
case 64:
                    console.log("reconoci token <run> con lexema: "+yy_.yytext)
                    return "run"
                
break;
case 65:
                                console.log("reconoci token <identificador> con lexema: "+yy_.yytext)
                                return "identificador";
                            
break;
case 66:
break;
case 67:
break;
case 68:
break;
case 69:
break;
case 70:return 5
break;
case 71: 
        console.log("error lexico");
    
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:['])/i,/^(?:[^'])/i,/^(?:['])/i,/^(?:["])/i,/^(?:[^"])/i,/^(?:["])/i,/^(?:([0-9]+\.[0-9]+))/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:\t)/i,/^(?:\r)/i,/^(?:\n)/i,/^(?:\s)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"cadena":{"rules":[0,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true},"caracter":{"rules":[0,1,3,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true},"INITIAL":{"rules":[0,1,2,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}