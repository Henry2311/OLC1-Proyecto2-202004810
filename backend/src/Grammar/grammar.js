/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[2,20],$V2=[1,29],$V3=[1,21],$V4=[1,27],$V5=[1,28],$V6=[1,26],$V7=[1,24],$V8=[1,25],$V9=[1,23],$Va=[1,22],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[1,33],$Vf=[1,34],$Vg=[2,5,23,24,45,46,51,53,55,57,58,61,64,65,66,67,68,100,101,102,103,104],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[24,27,50,71],$Vl=[8,27,28],$Vm=[8,27],$Vn=[1,75],$Vo=[1,67],$Vp=[1,94],$Vq=[1,93],$Vr=[1,92],$Vs=[1,91],$Vt=[1,90],$Vu=[1,88],$Vv=[1,89],$Vw=[1,65],$Vx=[1,66],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[8,27,28,48,72,82,85,86,87,88,89,90,91,92,93,94,95,96,98,99],$VE=[51,53,65,67],$VF=[1,130],$VG=[1,117],$VH=[1,116],$VI=[1,118],$VJ=[1,119],$VK=[1,120],$VL=[1,121],$VM=[1,122],$VN=[1,123],$VO=[1,124],$VP=[1,125],$VQ=[1,126],$VR=[1,127],$VS=[1,128],$VT=[1,129],$VU=[2,132],$VV=[2,49],$VW=[27,28],$VX=[2,69],$VY=[1,158],$VZ=[1,156],$V_=[1,157],$V$=[8,27,28,48,72,85,86,87,88,89,90,91,92,93,94,95,96,98,99],$V01=[8,27,28,48,72,98,99],$V11=[8,27,28,48,72,85,86,91,92,93,94,95,96,98,99],$V21=[8,27,28,48,72,91,92,93,94,95,96,98,99],$V31=[1,243],$V41=[8,27,28,48,72],$V51=[1,265],$V61=[28,72],$V71=[64,65,66],$V81=[64,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"puntocoma":8,"ASIGNACION":9,"INDECRE":10,"MODIFICACIONV":11,"IFSENTENCIA":12,"SWITCHSENTENCIA":13,"CICLOWHILE":14,"CICLOFOR":15,"CICLODOWHILE":16,"FUNCTION":17,"METODO":18,"LLAMADA":19,"FUNPRINT":20,"FUNPRINTLN":21,"EJECUTAR":22,"run":23,"identificador":24,"parena":25,"LISTAEXP":26,"parenc":27,"coma":28,"EXPRESION":29,"NATIVAS":30,"FUNLOWER":31,"FUNUPPER":32,"FUNROUND":33,"FUNLENGTH":34,"FUNTYPE":35,"FUNTOSTRING":36,"FUNTOCHAR":37,"tochararray":38,"tostring":39,"typeof":40,"length":41,"round":42,"tolower":43,"toupper":44,"print":45,"println":46,"PARAMETROS":47,"dospunto":48,"void":49,"llavea":50,"llavec":51,"TIPO":52,"return":53,"LLAMADAP":54,"do":55,"TRANSFERENCIA":56,"while":57,"for":58,"INICIOFOR":59,"ACTUALIZACION":60,"switch":61,"LISTACASES":62,"CASEDEF":63,"case":64,"break":65,"default":66,"continue":67,"if":68,"ELSESENTENCIA":69,"else":70,"corchetea":71,"corchetec":72,"igual":73,"ACCESOV":74,"LISTAVALORESV":75,"VALOR":76,"LISTAVALORESM":77,"plus":78,"minus":79,"CASTEO":80,"TERNARY":81,"ternario":82,"LISTAID":83,"new":84,"menos":85,"mas":86,"por":87,"divi":88,"mod":89,"pow":90,"igualq":91,"mayorq":92,"menorq":93,"mayorigq":94,"menorigq":95,"noigual":96,"negacion":97,"and":98,"or":99,"int":100,"double":101,"string":102,"char":103,"boolean":104,"valorint":105,"valordouble":106,"valorstring":107,"valorchar":108,"valorboolean":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"puntocoma",23:"run",24:"identificador",25:"parena",27:"parenc",28:"coma",38:"tochararray",39:"tostring",40:"typeof",41:"length",42:"round",43:"tolower",44:"toupper",45:"print",46:"println",48:"dospunto",49:"void",50:"llavea",51:"llavec",53:"return",55:"do",57:"while",58:"for",61:"switch",64:"case",65:"break",66:"default",67:"continue",68:"if",70:"else",71:"corchetea",72:"corchetec",73:"igual",78:"plus",79:"minus",82:"ternario",84:"new",85:"menos",86:"mas",87:"por",88:"divi",89:"mod",90:"pow",91:"igualq",92:"mayorq",93:"menorq",94:"mayorigq",95:"menorigq",96:"noigual",97:"negacion",98:"and",99:"or",100:"int",101:"double",102:"string",103:"char",104:"boolean",105:"valorint",106:"valordouble",107:"valorstring",108:"valorchar",109:"valorboolean"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,0],[22,5],[22,4],[26,3],[26,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[37,4],[36,4],[35,4],[34,4],[33,4],[31,4],[32,4],[20,4],[21,4],[18,9],[18,8],[18,7],[18,6],[17,12],[47,3],[47,1],[19,4],[19,3],[54,3],[54,1],[16,9],[15,12],[60,1],[60,1],[59,1],[59,1],[14,8],[13,8],[62,7],[62,6],[62,5],[62,4],[63,5],[56,2],[56,2],[56,3],[56,2],[56,0],[12,8],[12,9],[12,10],[69,5],[11,6],[11,9],[74,4],[74,7],[75,3],[75,1],[77,5],[77,3],[10,2],[10,2],[80,4],[81,5],[9,3],[7,2],[7,4],[7,2],[7,4],[7,10],[7,15],[7,8],[7,10],[7,6],[83,3],[83,1],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,3],[29,3],[29,3],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[52,1],[52,1],[52,1],[52,1],[52,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("Analisis sintactico completo"); return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 24: case 47: case 51: case 79:
this.$ = [$$[$0]]
break;
case 4: case 5: case 6: case 7: case 15: case 16: case 17: case 18: case 114:
this.$ = $$[$0-1]
break;
case 8: case 9: case 10: case 11: case 12: case 14: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 54: case 56: case 57: case 97: case 115: case 116: case 117: case 118: case 119: case 120: case 121:
this.$ = $$[$0]
break;
case 19:
console.log("Error sintactico") 
                                var s = Singleton.getInstance()
                                s.addError(new Errores("Sintactico","Token no esperado "+$$[$0],_$[$0].first_line,_$[$0].first_column))
break;
case 20: case 69:
this.$ = null
break;
case 21:
this.$ = new RUN($$[$0-3],$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 22:
this.$ = new RUN($$[$0-2],null,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 23: case 50:
$$[$0-2].push($$[$0]); this.$=$$[$0-2]
break;
case 32:
this.$ = new Nativas($$[$0-1],FunctionOptions.TOCHAR,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 33:
this.$ = new Nativas($$[$0-1],FunctionOptions.TOSTRING,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 34:
this.$ = new Nativas($$[$0-1],FunctionOptions.TYPEOF,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 35:
this.$ = new Nativas($$[$0-1],FunctionOptions.LENGTH,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 36:
this.$ = new Nativas($$[$0-1],FunctionOptions.ROUND,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 37:
this.$ = new Nativas($$[$0-1],FunctionOptions.LOWER,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 38:
this.$ = new Nativas($$[$0-1],FunctionOptions.UPPER,_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 39:
this.$ = new Print($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 40:
this.$ = new Println($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 41:
this.$ = new Metodo($$[$0-8],Type.VOID,$$[$0-1],$$[$0-6],_$[$0-8].first_line, _$[$0-8].first_column)
break;
case 42:
this.$ = new Metodo($$[$0-7],Type.VOID,$$[$0-1],null,_$[$0-7].first_line, _$[$0-7].first_column)
break;
case 43:
this.$ = new Metodo($$[$0-6],Type.VOID,$$[$0-1],$$[$0-4],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 44:
this.$ = new Metodo($$[$0-5],Type.VOID,$$[$0-1],null,_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 45:
this.$ = new Functions($$[$0-11],$$[$0-6],$$[$0-4],$$[$0-9],$$[$0-2],_$[$0-11].first_line, _$[$0-11].first_column)
break;
case 46: case 78:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 48:
this.$ = new Call($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 49:
this.$ = new Call($$[$0-2],null,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 52:
this.$ = new cicloDo($$[$0-1],$$[$0-6],$$[$0-5],_$[$0-8].first_line, _$[$0-8].first_column)
break;
case 53:
this.$ = new cicloFor($$[$0-9],$$[$0-7],$$[$0-5],$$[$0-2],$$[$0-1],_$[$0-11].first_line, _$[$0-11].first_column)
break;
case 55:
this.$ = S1
break;
case 58:
this.$ = new cicloWhile($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column)
break;
case 59:
this.$=new Switch($$[$0-5],$$[$0-2],$$[$0-1] ,_$[$0-7].first_line, _$[$0-7].first_column)
break;
case 60:
$$[$0-6].push(new SwitchCase($$[$0-4],$$[$0-2],1,_$[$0-6].first_line, _$[$0-6].first_column)); this.$=$$[$0-6];
break;
case 61:
this.$=[new SwitchCase($$[$0-4],$$[$0-2],1,_$[$0-5].first_line, _$[$0-5].first_column)]
break;
case 62:
$$[$0-4].push(new SwitchCase($$[$0-2],$$[$0],0,_$[$0-4].first_line, _$[$0-4].first_column)); this.$=$$[$0-4];
break;
case 63:
this.$=[new SwitchCase($$[$0-2],$$[$0],0,_$[$0-3].first_line, _$[$0-3].first_column)]
break;
case 64:
this.$ = $$[$0-2]
break;
case 65:
this.$=Type.BREAK
break;
case 66:
this.$=Type.CONTINUE
break;
case 70:
this.$ = new Ifsentencia($$[$0-5],$$[$0-2],null,$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column)
break;
case 71:
this.$ = new Ifsentencia($$[$0-6],$$[$0-3],$$[$0],$$[$0-2],_$[$0-8].first_line, _$[$0-8].first_column)
break;
case 72:
this.$ = new Ifsentencia($$[$0-7],$$[$0-4],$$[$0],$$[$0-3],_$[$0-9].first_line, _$[$0-9].first_column)
break;
case 73:
this.$ = new Ifsentencia(null,$$[$0-2],null,$$[$0-1],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 74:
this.$ = new AsignacionV($$[$0-5],$$[$0-3],null,$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 75:
this.$ = new AsignacionV($$[$0-8],$$[$0-6],$$[$0-3],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column)
break;
case 76:
this.$= new IDE($$[$0-3],1,$$[$0-1],null, _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 77:
this.$= new IDE($$[$0-6],1,$$[$0-4],$$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 80:
$$[$0-4].push($$[$0-1]); this.$ = $$[$0-4];
break;
case 81:
this.$ = [$$[$0-1]]
break;
case 82:
this.$ = new Increment($$[$0-1],0,_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 83:
this.$ = new Increment($$[$0-1],1,_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 84:
this.$ = new Casteo($$[$0-2],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 85:
this.$ = new Ternary($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 86:
this.$ = new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 87: case 89:
this.$= new Declaracion($$[$0],$$[$0-1],null, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 88: case 90:
this.$= new Declaracion($$[$0-2],$$[$0-3],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 91:
this.$= new DeclaracionV($$[$0-8],$$[$0-9],$$[$0-1],null,null,null,0, _$[$0-9].first_line, _$[$0-9].first_column)
break;
case 92:
this.$= new DeclaracionV($$[$0-13],$$[$0-14],$$[$0-4],$$[$0-1],null,null,0, _$[$0-14].first_line, _$[$0-14].first_column)
break;
case 93:
this.$= new DeclaracionV($$[$0-6],$$[$0-7],null,null,$$[$0-1],null,0,_$[$0-7].first_line, _$[$0-7].first_column)
break;
case 94:
this.$= new DeclaracionV($$[$0-8],$$[$0-9],null,null,$$[$0-1],null,1,_$[$0-9].first_line, _$[$0-9].first_column)
break;
case 95:
this.$= new DeclaracionV($$[$0-4],$$[$0-5],null,null,null,$$[$0],2,_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 96:
$$[$0-2]+=","+$$[$0]; this.$ = $$[$0-2];
break;
case 98:
this.$ = new Arithmetic(null,$$[$0],ArithmeticOption.NEGACION,_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 99:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 100:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 101:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POR,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 102:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 103:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MOD,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 104:
this.$ = new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POW,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 105:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.IGUALQ,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 106:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.MAYORQ,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 107:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.MENORQ,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 108:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.MAYORIGQ,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 109:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.MENORIGQ,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 110:
this.$ = new Rational($$[$0-2],$$[$0],RationalOption.NOIGUAL,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 111:
this.$ = new Logic(null,$$[$0],LogicOption.NOT,_$[$0-1].first_line, _$[$0-1].first_column)
break;
case 112:
this.$ = new Logic($$[$0-2],$$[$0],LogicOption.AND,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 113:
this.$ = new Logic($$[$0-2],$$[$0],LogicOption.OR,_$[$0-2].first_line, _$[$0-2].first_column)
break;
case 122:
this.$=Type.INT
break;
case 123:
this.$=Type.DOUBLE
break;
case 124:
this.$=Type.STRING
break;
case 125:
this.$=Type.CHAR
break;
case 126:
this.$=Type.BOOLEAN
break;
case 127:
this.$= new Value($$[$0],Type.INT,  _$[$0].first_line, _$[$0].first_column)
break;
case 128:
this.$= new Value($$[$0],Type.DOUBLE,  _$[$0].first_line, _$[$0].first_column)
break;
case 129:
this.$= new Value($$[$0],Type.STRING,  _$[$0].first_line, _$[$0].first_column)
break;
case 130:
this.$= new Value($$[$0],Type.CHAR,  _$[$0].first_line, _$[$0].first_column)
break;
case 131:
this.$= new Value($$[$0],Type.BOOLEAN,  _$[$0].first_line, _$[$0].first_column)
break;
case 132:
this.$= new IDE($$[$0],0,null,null, _$[$0].first_line, _$[$0].first_column)
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,52:20,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{1:[3]},{2:$V0,5:[1,35],6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,52:20,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},o($Vg,[2,3]),{8:[1,37]},{8:[1,38]},{8:[1,39]},{8:[1,40]},o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),{8:[1,41]},{8:[1,42]},{8:[1,43]},{8:[1,44]},o($Vg,[2,19]),{24:[1,45],83:46},{25:[1,51],71:[1,50],73:$Vh,78:$Vi,79:$Vj},{25:[1,52]},{25:[1,53]},{25:[1,54]},{25:[1,55]},{50:[1,56]},{25:[1,57]},{25:[1,58]},{24:[1,59]},o($Vk,[2,122]),o($Vk,[2,123]),o($Vk,[2,124]),o($Vk,[2,125]),o($Vk,[2,126]),{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),o($Vl,[2,87],{71:[1,61],73:[1,60]}),o($Vm,[2,89],{28:[1,63],73:[1,62]}),{10:68,19:72,24:$Vn,25:$Vo,29:64,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($VD,[2,82]),o($VD,[2,83]),{10:68,19:72,24:$Vn,25:$Vo,29:95,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{7:99,10:68,19:72,24:$Vn,25:$Vo,27:[1,97],29:100,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,47:96,52:20,54:98,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:101,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:102,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:103,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{7:105,9:106,24:[1,107],52:20,59:104,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},o($VE,$V1,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,52:20,4:108,2:$V0,23:$V2,24:$V3,45:$V4,46:$V5,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf}),{10:68,19:72,24:$Vn,25:$Vo,29:109,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:110,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{25:[1,111]},{10:68,19:72,24:$Vn,25:$Vo,29:112,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{72:[1,113]},{10:68,19:72,24:$Vn,25:$Vo,29:114,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{24:[1,115]},o($Vm,[2,86],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT}),{10:68,19:72,24:$Vn,25:$Vo,29:131,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:132,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:133,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,52:134,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($VD,[2,115]),o($VD,[2,116]),o($VD,[2,117]),o($VD,[2,118]),o($VD,[2,119]),o($VD,[2,120]),o($VD,[2,121]),o($VD,$VU,{25:[1,136],71:[1,135],78:$Vi,79:$Vj}),o($VD,[2,25]),o($VD,[2,26]),o($VD,[2,27]),o($VD,[2,28]),o($VD,[2,29]),o($VD,[2,30]),o($VD,[2,31]),o($VD,[2,127]),o($VD,[2,128]),o($VD,[2,129]),o($VD,[2,130]),o($VD,[2,131]),{25:[1,137]},{25:[1,138]},{25:[1,139]},{25:[1,140]},{25:[1,141]},{25:[1,142]},{25:[1,143]},{72:[1,144],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{27:[1,145],28:[1,146]},{8:$VV,48:[1,147],50:[1,148]},{27:[1,149],28:[1,150]},o($VW,[2,47]),o($VW,[2,51],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT}),{27:[1,151],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{27:[1,152],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{27:[1,153],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{8:[1,154]},{8:[2,56]},{8:[2,57]},{73:$Vh},{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:$VX,52:20,53:$VY,55:$V6,56:155,57:$V7,58:$V8,61:$V9,65:$VZ,67:$V_,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{27:[1,159],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{27:[1,160],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{10:68,19:72,24:$Vn,25:$Vo,26:161,27:[1,162],29:163,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($Vl,[2,88],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT}),{71:[1,165],73:[1,164]},o($Vl,[2,90],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT}),o([8,27,28,73],[2,96]),{10:68,19:72,24:$Vn,25:$Vo,29:166,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:167,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:168,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:169,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:170,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:171,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:172,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:173,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:174,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:175,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:176,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:177,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:178,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:179,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:180,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($V$,[2,98],{82:$VF}),o($V01,[2,111],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),{27:[1,181],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{27:[1,182]},{10:68,19:72,24:$Vn,25:$Vo,29:183,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,27:[1,184],29:100,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,54:98,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:185,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:186,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:187,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:188,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:189,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:190,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:191,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{71:[1,193],73:[1,192]},{48:[1,194],50:[1,195]},{7:196,52:20,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{49:[1,197]},{2:$V0,4:198,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:$V1,52:20,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},o($VD,[2,48]),{10:68,19:72,24:$Vn,25:$Vo,29:199,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{50:[1,200]},{50:[1,201]},{50:[1,202]},{10:68,19:72,24:$Vn,25:$Vo,29:203,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{51:[1,204]},{8:[1,205]},{8:[1,206]},{8:[1,208],10:68,19:72,24:$Vn,25:$Vo,29:207,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{8:[2,39]},{8:[2,40]},{27:[1,209],28:[1,210]},{8:[2,22]},o($VW,[2,24],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT}),{37:213,38:$Vp,71:[1,212],84:[1,211]},{72:[1,214]},o($V11,[2,99],{82:$VF,87:$VI,88:$VJ,89:$VK,90:$VL}),o($V11,[2,100],{82:$VF,87:$VI,88:$VJ,89:$VK,90:$VL}),o($V$,[2,101],{82:$VF}),o($V$,[2,102],{82:$VF}),o($V$,[2,103],{82:$VF}),o($V$,[2,104],{82:$VF}),o($V21,[2,105],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL}),o($V21,[2,106],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL}),o($V21,[2,107],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL}),o($V21,[2,108],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL}),o($V21,[2,109],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL}),o($V21,[2,110],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL}),o($V01,[2,112],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR}),o([8,27,28,48,72,99],[2,113],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS}),{48:[1,215],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},o($VD,[2,114]),{10:68,19:72,24:$Vn,25:$Vo,29:216,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{72:[1,217],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},o($VD,$VV),{27:[1,218],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{27:[1,219],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{27:[1,220],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{27:[1,221],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{27:[1,222],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{27:[1,223],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{27:[1,224],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{10:68,19:72,24:$Vn,25:$Vo,29:225,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:226,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{49:[1,228],52:227,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{2:$V0,4:229,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:$V1,52:20,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},o($VW,[2,46]),{50:[1,230]},{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:[1,231],52:20,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},o($VW,[2,50],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT}),o($VE,$V1,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,52:20,4:232,2:$V0,23:$V2,24:$V3,45:$V4,46:$V5,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf}),{62:233,64:[1,234]},o($VE,$V1,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,52:20,4:235,2:$V0,23:$V2,24:$V3,45:$V4,46:$V5,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf}),{8:[1,236],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{57:[1,237]},{51:[2,65]},{51:[2,66]},{8:[1,238],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{51:[2,68]},{8:[2,21]},{10:68,19:72,24:$Vn,25:$Vo,29:239,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{52:240,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{24:$V31,75:241,76:242,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($Vl,[2,95]),{73:[1,244]},{10:68,19:72,24:$Vn,25:$Vo,29:245,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($V41,[2,84],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT}),o($VD,[2,76],{71:[1,246]}),o($VD,[2,37]),o($VD,[2,38]),o($VD,[2,36]),o($VD,[2,35]),o($VD,[2,34]),o($VD,[2,33]),o($VD,[2,32]),{8:[2,74],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{72:[1,247],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{50:[1,248]},{50:[1,249]},{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:[1,250],52:20,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{2:$V0,4:251,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:$V1,52:20,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},o($Vg,[2,44]),{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:$VX,52:20,53:$VY,55:$V6,56:252,57:$V7,58:$V8,61:$V9,65:$VZ,67:$V_,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{63:253,64:[1,254],66:[1,255]},{10:68,19:72,24:$Vn,25:$Vo,29:256,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:$VX,52:20,53:$VY,55:$V6,56:257,57:$V7,58:$V8,61:$V9,65:$VZ,67:$V_,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{9:260,10:259,24:[1,261],60:258},{25:[1,262]},{51:[2,67]},o($VW,[2,23],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT}),{71:[1,263]},{28:$V51,72:[1,264]},o($V61,[2,79]),o($V61,$VU),{71:[1,267],84:[1,266]},o($V41,[2,85],{82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT}),{10:68,19:72,24:$Vn,25:$Vo,29:268,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{73:[1,269]},{2:$V0,4:270,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,52:20,53:$V1,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{2:$V0,4:271,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:$V1,52:20,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},o($Vg,[2,43]),{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:[1,272],52:20,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{51:[1,273]},{51:[1,274]},{10:68,19:72,24:$Vn,25:$Vo,29:275,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{48:[1,276]},{48:[1,277],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{51:[1,278]},{27:[1,279]},{27:[2,54]},{27:[2,55]},{73:$Vh,78:$Vi,79:$Vj},{10:68,19:72,24:$Vn,25:$Vo,29:280,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{10:68,19:72,24:$Vn,25:$Vo,29:281,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($Vl,[2,93]),{24:$V31,76:282,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{52:283,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{71:[1,285],77:284},{72:[1,286],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{10:68,19:72,24:$Vn,25:$Vo,29:287,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,52:20,53:[1,288],55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:[1,289],52:20,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},o($Vg,[2,42]),o($Vg,[2,70],{69:290,70:[1,291]}),o($Vg,[2,59]),{48:[1,292],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{2:$V0,4:293,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,52:20,55:$V6,57:$V7,58:$V8,61:$V9,65:$V1,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},o($V71,$V1,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,52:20,4:294,2:$V0,23:$V2,24:$V3,45:$V4,46:$V5,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf}),o($Vg,[2,58]),{50:[1,295]},{27:[1,296],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{72:[1,297],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},o($V61,[2,78]),{71:[1,298]},{28:[1,300],72:[1,299]},{24:$V31,75:301,76:242,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($VD,[2,77]),{8:[2,75],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{10:68,19:72,24:$Vn,25:$Vo,29:302,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($Vg,[2,41]),o($Vg,[2,71]),{12:303,50:[1,304],68:$Va},o($V71,$V1,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,52:20,4:305,2:$V0,23:$V2,24:$V3,45:$V4,46:$V5,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf}),{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,52:20,55:$V6,57:$V7,58:$V8,61:$V9,65:[1,306],68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},o($V81,[2,63],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,52:20,6:36,2:$V0,23:$V2,24:$V3,45:$V4,46:$V5,55:$V6,57:$V7,58:$V8,61:$V9,65:[1,307],68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf}),o($VE,$V1,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,52:20,4:308,2:$V0,23:$V2,24:$V3,45:$V4,46:$V5,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf}),o($Vg,[2,52]),o($Vl,[2,91]),{10:68,19:72,24:$Vn,25:$Vo,29:309,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($Vl,[2,94]),{71:[1,310]},{28:$V51,72:[1,311]},{8:[1,312],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},o($Vg,[2,72]),o($VE,$V1,{6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,52:20,4:313,2:$V0,23:$V2,24:$V3,45:$V4,46:$V5,55:$V6,57:$V7,58:$V8,61:$V9,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf}),o($V81,[2,62],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,52:20,6:36,2:$V0,23:$V2,24:$V3,45:$V4,46:$V5,55:$V6,57:$V7,58:$V8,61:$V9,65:[1,314],68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf}),{8:[1,315]},{8:[1,316]},{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:$VX,52:20,53:$VY,55:$V6,56:317,57:$V7,58:$V8,61:$V9,65:$VZ,67:$V_,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{72:[1,318],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},{24:$V31,75:319,76:242,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($V61,[2,81]),{51:[1,320]},{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:$V2,24:$V3,45:$V4,46:$V5,51:$VX,52:20,53:$VY,55:$V6,56:321,57:$V7,58:$V8,61:$V9,65:$VZ,67:$V_,68:$Va,100:$Vb,101:$Vc,102:$Vd,103:$Ve,104:$Vf},{8:[1,322]},{51:[2,64]},o($V81,[2,61]),{51:[1,323]},{71:[1,324]},{28:$V51,72:[1,325]},o($Vg,[2,45]),{51:[1,326]},o($V81,[2,60]),o($Vg,[2,53]),{10:68,19:72,24:$Vn,25:$Vo,29:327,30:73,31:76,32:77,33:78,34:79,35:80,36:81,37:82,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,74:69,76:74,80:70,81:71,85:$Vw,97:$Vx,105:$Vy,106:$Vz,107:$VA,108:$VB,109:$VC},o($V61,[2,80]),o($Vg,[2,73]),{72:[1,328],82:$VF,85:$VG,86:$VH,87:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO,94:$VP,95:$VQ,96:$VR,98:$VS,99:$VT},o($Vl,[2,92])],
defaultActions: {35:[2,1],105:[2,56],106:[2,57],159:[2,39],160:[2,40],162:[2,22],205:[2,65],206:[2,66],208:[2,68],209:[2,21],238:[2,67],259:[2,54],260:[2,55],315:[2,64]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Declaracion} = require('../Instructions/Declaracion');
    const {DeclaracionV} = require('../Instructions/DeclaracionV');
    const {Asignacion} = require('../Instructions/Asignacion');
    const {AsignacionV} = require('../Instructions/AsignacionV');
    const {Print} = require('../Instructions/Print');
    const {Println} = require('../Instructions/Printl');
    const {Increment} = require('../Instructions/Increment');
    const {Ternary} = require('../Instructions/Ternary');
    const {Ifsentencia} = require('../Instructions/If');
    const {Switch} = require('../Instructions/Switch');
    const {SwitchCase} = require('../Instructions/SwitchCase');
    const {Nativas} = require('../Instructions/Nativas');
    const {FunctionOptions} = require('../Instructions/Nativas');

    const {cicloWhile} = require('../Instructions/cicloWhile');
    const {cicloDo} = require('../Instructions/cicloDo');
    const {cicloFor} = require('../Instructions/cicloFor');

    const {Metodo} = require('../Instructions/Method');
    const {Functions} = require('../Instructions/Funtions');
    const {Call} = require('../Instructions/Llamada');
    const {RUN} = require('../Instructions/ejecutar');

    const {Arithmetic} = require('../Expressions/Arithmetic');
    const {ArithmeticOption} = require('../Expressions/Arithmetic');
    const {Rational} = require('../Expressions/Rational');
    const {RationalOption} = require('../Expressions/Rational');
    const {Logic} = require('../Expressions/Logic');
    const {LogicOption} = require('../Expressions/Logic');
    const {Casteo} = require('../Expressions/Casteo');

    const {Type} = require('../Symbol/type');
    const {Value} = require('../Expressions/Value');
    const {IDE} = require('../Expressions/IDE');
    const {Errores} = require('../Symbol/error');

    const {Singleton} = require("../Pattern/Singleton")

    var s = Singleton.getInstance()
    var tmp = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// comentario simple línea
break;
case 1:// comentario multiple líneas
break;
case 2:
                    this.begin('caracter')
                
break;
case 3:
                    tmp = tmp +  yy_.yytext;
                
break;
case 4:
                    //this.begin('INITIAL'); 
                    this.popState();
                    yy_.yytext = tmp
                    console.log("reconoci token <caracter> con lexema: "+yy_.yytext)
                    tmp=""
                    return 108
                
break;
case 5:
                    this.begin('cadena')
                
break;
case 6:
                    tmp = tmp +  yy_.yytext;
                
break;
case 7:
                    //this.begin('INITIAL'); 
                    this.popState();
                    yy_.yytext = tmp
                    console.log("reconoci token <cadena> con lexema: "+yy_.yytext)
                    tmp=""
                    return 107
                
break;
case 8:
                    console.log("reconoci token <decimal> con lexema: "+yy_.yytext)
                    return "valordouble"
                
break;
case 9:
                    console.log("reconoci token <entero> con lexema: "+yy_.yytext)
                    return "valorint"
                
break;
case 10:
                    console.log("reconoci token <boleano> con lexema: "+yy_.yytext)
                    return "valorboolean"
                
break;
case 11:
                    console.log("reconoci token <int> con lexema: "+yy_.yytext)
                    return "int"
                
break;
case 12:
                    console.log("reconoci token <double> con lexema: "+yy_.yytext)
                    return "double"
                
break;
case 13:
                    console.log("reconoci token <string> con lexema: "+yy_.yytext)
                    return "string"
                
break;
case 14:
                    console.log("reconoci token <char> con lexema: "+yy_.yytext)
                    return "char"
                
break;
case 15:
                    console.log("reconoci token <boolean> con lexema: "+yy_.yytext)
                    return "boolean"
                
break;
case 16:
                    console.log("reconoci token <plus> con lexema: "+yy_.yytext)
                    return "plus"
                
break;
case 17:
                    console.log("reconoci token <minus> con lexema: "+yy_.yytext)
                    return "minus"
                
break;
case 18:
                    console.log("reconoci token <mas> con lexema: "+yy_.yytext)
                    return "mas"
                
break;
case 19:
                    console.log("reconoci token <menos> con lexema: "+yy_.yytext)
                    return "menos"
                
break;
case 20:
                    console.log("reconoci token <por> con lexema: "+yy_.yytext)
                    return "por"
                
break;
case 21:
                    console.log("reconoci token <divi> con lexema: "+yy_.yytext)
                    return "divi"
                
break;
case 22:
                    console.log("reconoci token <pow> con lexema: "+yy_.yytext)
                    return "pow"
                
break;
case 23:
                    console.log("reconoci token <mod> con lexema: "+yy_.yytext)
                    return "mod"
                
break;
case 24:
                    console.log("reconoci token <igualq> con lexema: "+yy_.yytext)
                    return "igualq"
                
break;
case 25:
                    console.log("reconoci token <noigual> con lexema: "+yy_.yytext)
                    return "noigual"
                
break;
case 26:
                    console.log("reconoci token <menorigq> con lexema: "+yy_.yytext)
                    return "menorigq"
                
break;
case 27:
                    console.log("reconoci token <mayorigq> con lexema: "+yy_.yytext)
                    return "mayorigq"
                
break;
case 28:
                    console.log("reconoci token <igual> con lexema: "+yy_.yytext)
                    return "igual"
                
break;
case 29:
                    console.log("reconoci token <negacion> con lexema: "+yy_.yytext)
                    return "negacion"
                
break;
case 30:
                    console.log("reconoci token <menorq> con lexema: "+yy_.yytext)
                    return "menorq"
                
break;
case 31:
                    console.log("reconoci token <mayorq> con lexema: "+yy_.yytext)
                    return "mayorq"
                
break;
case 32:
                    console.log("reconoci token <ternario> con lexema: "+yy_.yytext)
                    return "ternario"
                
break;
case 33:
                    console.log("reconoci token <or> con lexema: "+yy_.yytext)
                    return "or"
                
break;
case 34:
                    console.log("reconoci token <and> con lexema: "+yy_.yytext)
                    return "and"
                
break;
case 35:
                    console.log("reconoci token <coma> con lexema: "+yy_.yytext)
                    return "coma"
                
break;
case 36:
                    console.log("reconoci token <dospunto> con lexema: "+yy_.yytext)
                    return "dospunto"
                
break;
case 37:
                    console.log("reconoci token <puntocoma> con lexema: "+yy_.yytext)
                    return "puntocoma"
                
break;
case 38:
                    console.log("reconoci token <llavea> con lexema: "+yy_.yytext)
                    return "llavea"
                
break;
case 39:
                    console.log("reconoci token <llavec> con lexema: "+yy_.yytext)
                    return "llavec"
                
break;
case 40:
                    console.log("reconoci token <parena> con lexema: "+yy_.yytext)
                    return "parena"
                
break;
case 41:
                    console.log("reconoci token <parenc> con lexema: "+yy_.yytext)
                    return "parenc"
                
break;
case 42:
                    console.log("reconoci token <corchetea> con lexema: "+yy_.yytext)
                    return "corchetea"
                
break;
case 43:
                    console.log("reconoci token <corchetec> con lexema: "+yy_.yytext)
                    return "corchetec"
                
break;
case 44:
                    console.log("reconoci token <new> con lexema: "+yy_.yytext)
                    return "new"
                
break;
case 45:
                    console.log("reconoci token <if> con lexema: "+yy_.yytext)
                    return "if"
                
break;
case 46:
                    console.log("reconoci token <else> con lexema: "+yy_.yytext)
                    return "else"
                
break;
case 47:
                    console.log("reconoci token <switch> con lexema: "+yy_.yytext)
                    return "switch"
                
break;
case 48:
                    console.log("reconoci token <case> con lexema: "+yy_.yytext)
                    return "case"
                
break;
case 49:
                    console.log("reconoci token <default> con lexema: "+yy_.yytext)
                    return "default"
                
break;
case 50:
                    console.log("reconoci token <while> con lexema: "+yy_.yytext)
                    return "while"
                
break;
case 51:
                    console.log("reconoci token <for> con lexema: "+yy_.yytext)
                    return "for"
                
break;
case 52:
                    console.log("reconoci token <do> con lexema: "+yy_.yytext)
                    return "do"
                
break;
case 53:
                    console.log("reconoci token <break> con lexema: "+yy_.yytext)
                    return "break"
                
break;
case 54:
                    console.log("reconoci token <continue> con lexema: "+yy_.yytext)
                    return "continue"
                
break;
case 55:
                    console.log("reconoci token <return> con lexema: "+yy_.yytext)
                    return "return"
                
break;
case 56:
                    console.log("reconoci token <void> con lexema: "+yy_.yytext)
                    return "void"
                
break;
case 57:
                    console.log("reconoci token <print> con lexema: "+yy_.yytext)
                    return "print"
                
break;
case 58:
                    console.log("reconoci token <println> con lexema: "+yy_.yytext)
                    return "println"
                
break;
case 59:
                    console.log("reconoci token <tolower> con lexema: "+yy_.yytext)
                    return "tolower"
                
break;
case 60:
                    console.log("reconoci token <toupper> con lexema: "+yy_.yytext)
                    return "toupper"
                
break;
case 61:
                    console.log("reconoci token <round> con lexema: "+yy_.yytext)
                    return "round"
                
break;
case 62:
                    console.log("reconoci token <length> con lexema: "+yy_.yytext)
                    return "length"
                
break;
case 63:
                    console.log("reconoci token <typeof> con lexema: "+yy_.yytext)
                    return "typeof"
                
break;
case 64:
                    console.log("reconoci token <tostring> con lexema: "+yy_.yytext)
                    return "tostring"
                
break;
case 65:
                    console.log("reconoci token <tochararray> con lexema: "+yy_.yytext)
                    return "tochararray"
                
break;
case 66:
                    console.log("reconoci token <run> con lexema: "+yy_.yytext)
                    return "run"
                
break;
case 67:
                                console.log("reconoci token <identificador> con lexema: "+yy_.yytext)
                                return "identificador";
                            
break;
case 68:
break;
case 69:
break;
case 70:
break;
case 71:
break;
case 72:return 5
break;
case 73: 
        console.log("error lexico");
        s.addError(new Errores("Lexico","Token no esperado "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column))
    
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:['])/i,/^(?:[^'])/i,/^(?:['])/i,/^(?:["])/i,/^(?:[^"])/i,/^(?:["])/i,/^(?:([0-9]+\.[0-9]+))/i,/^(?:([0-9]+))/i,/^(?:(true|false\b))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\?)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:run\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:\t)/i,/^(?:\r)/i,/^(?:\n)/i,/^(?:\s)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"cadena":{"rules":[0,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true},"caracter":{"rules":[0,1,3,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true},"INITIAL":{"rules":[0,1,2,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}